# 製品要求仕様書 (PRD)
## x402 Learning Lab - x402プロトコル学習プラットフォーム

### 1. 製品概要

#### 製品名
x402 Learning Lab（x402プロトコル学習プラットフォーム）

#### 製品ビジョン
x402プロトコルを体験・学習するためのハンズオンプラットフォーム。ユーザーが自然言語でAPIを作成し、x402決済を体験し、AIエージェントによる自動決済を理解できる革新的な教育プラットフォーム。Cloudflare Workers + モノレポ構成で、次世代Web決済プロトコルの普及を促進する。

#### アプリケーション概要
**x402 Learning Lab**は、x402プロトコルの理解促進を目的とした体験型学習プラットフォームです。以下の統合機能で構成されます：

1. **自然言語API生成** - 日本語でAPIを作成・x402統合
2. **体験型学習コンテンツ** - ステップバイステップガイド
3. **実践プレイグラウンド** - 作成APIのテスト・決済体験
4. **AIエージェント体験** - 自動決済フローの可視化

#### 対象ユーザー

**x402初学者（Primary）**:
- Web3・ブロックチェーン技術に興味のある開発者
- 次世代決済システムを学びたいエンジニア
- AIエージェント時代のプログラミングに関心がある人

**AI・Web3開発者（Secondary）**:
- AIエージェント開発者
- DApps開発者
- フィンテック・決済システム開発者

**技術教育者・学習者（Tertiary）**:
- プログラミング教育関係者
- 技術系コンテンツクリエイター
- 先端技術動向をキャッチアップしたい人

#### ユーザーストーリー

**x402初学者として:**
- x402プロトコルとは何かを理解したい
- 自然言語でAPIを作成する体験をしたい
- 実際にブロックチェーン決済を体験したい
- AIエージェントの自動決済を見てみたい
- 複雑な技術設定なしで学習したい

**AI・Web3開発者として:**
- x402の実装方法を学びたい
- 自分のプロジェクトでの活用方法を知りたい
- AIエージェント統合のベストプラクティスを習得したい
- 実際のコード例とサンプルが欲しい

**技術教育者として:**
- x402の教育コンテンツを作成したい
- 学習者に分かりやすい説明方法を知りたい
- 実際の体験を通じて教えたい

#### 学習価値・技術検証価値

**x402プロトコル理解促進:**
- HTTP 402ステータスコードの活用方法
- ブロックチェーン決済の仕組み
- AIエージェント時代の新しい決済体験
- 従来決済システムとの違い・メリット

**技術スタック検証:**
- Cloudflare Workers での x402統合
- 自然言語処理によるAPI自動生成
- LLM統合によるコード生成
- リアルタイム決済フローの可視化

**学習効果測定:**
- インタラクティブな体験による理解度向上
- 実践を通じた技術習得
- AIネイティブ開発の先行体験

### 2. 技術仕様

#### 2.1 アーキテクチャ
- **モノレポ管理**: Turborepo
- **フロントエンド**: Next.js 15 (App Router) on Cloudflare Workers via @opennextjs/cloudflare
- **バックエンド**: Hono + x402統合 on Cloudflare Workers
- **LLM統合**: Claude/GPT-4による自然言語処理
- **x402プロトコル**: Coinbase x402-hono ミドルウェア
- **ブロックチェーン**: Base Sepolia専用（USDC決済）
- **AI処理**: Gemini・OpenAI・Anthropic API統合
- **データベース**: PostgreSQL via Hyperdrive
- **キャッシュ**: Workers KV（API生成結果、決済状況）
- **ファイルストレージ**: R2（生成コード、学習コンテンツ）

#### 2.2 ディレクトリ構成
```
apps/
  frontend/               # Next.js Learning Platform
    app/
      (auth)/             # 認証関連ページ (login, register)
      learn/              # x402学習コンテンツ (/learn/*)
        basics/           # 基礎概念
        tutorial/         # ステップバイステップ
        playground/       # 体験エリア
      api-builder/        # 自然言語API作成 (/api-builder/*)
        generator/        # API生成画面
        dashboard/        # 作成API管理
        testing/          # APIテストUI
      ai-demo/            # AIエージェント体験 (/ai-demo/*)
        chat/             # AI会話画面
        payments/         # 決済可視化
    components/           # 学習用コンポーネント
    lib/                  # LLM統合・ウォレット連携
  backend/                # Hono + x402 Application
    routes/
      api/                # ユーザー生成API (/api/*)
        dynamic/          # 動的生成エンドポイント
      internal/           # プラットフォーム内部API (/internal/*)
        llm/              # LLM処理
        x402/             # x402管理
        generator/        # API生成ロジック
    middleware/           # x402・認証ミドルウェア
    services/             # API生成・AI統合サービス
  jobs/                   # Background Processing
    src/
      api-deployment.ts   # 動的API配信
      usage-tracking.ts   # 使用量追跡
      content-update.ts   # 学習コンテンツ更新
packages/
  db/                     # 学習プラットフォーム用スキーマ
  shared/                 # 共有型定義・Zodスキーマ
  x402-integration/       # x402プロトコル統合
  llm-services/           # LLM API統合
  blockchain-connector/   # ウォレット・ブロックチェーン接続
  api-generator/          # 自然言語→API変換エンジン
  learning-content/       # 教育コンテンツ管理
  ui/                     # 学習UI専用コンポーネント
  config/                 # 共通設定
```

### 3. 自然言語API生成機能仕様

#### 3.1 自然言語API Builder (`/api-builder/*`)

**概要**: 日本語でAPIを説明するだけで、x402対応APIが自動生成される革新的機能

#### 3.2 生成・管理システム概要

**🔧 API生成パイプライン**:
```typescript
// ユーザー入力 → LLM解析 → コード生成 → 動的デプロイ
const generationFlow = {
  input: "東京の天気を取得するAPIが欲しい",
  llmAnalysis: "weather_api + GET + OpenWeatherMap",
  codeGeneration: "Hono + x402 + 外部API統合コード",
  deployment: "動的ルート登録 + DB保存"
}
```

**🗄️ API管理アーキテクチャ**:
- **データベース**: 生成API、使用ログ、設定を永続化
- **動的ルーティング**: 実行時にHonoアプリへルート追加
- **セキュリティ**: サンドボックス実行、コード検証、リソース制限
- **監視**: パフォーマンス追跡、エラー検知、使用量分析

**🛡️ 安全な実行環境**:
- VM2サンドボックスによる隔離実行
- 危険関数の使用禁止（eval、require等）
- 許可ドメインのみの外部API呼び出し
- 実行時間・メモリ・レスポンスサイズ制限

**📊 管理ダッシュボード**:
- 生成API一覧・編集・削除・有効化切替
- リアルタイム使用量統計・エラー率
- x402決済ログ・収益分析（デモ）
- API品質スコア・パフォーマンス指標

#### 3.3 詳細機能仕様

**🗣️ 自然言語入力解析:**
```typescript
// ユーザー入力例
"東京の今日の天気を教えてくれるAPIが欲しい"
"画像をアップロードすると猫の品種を判定するAPI"
"英語を日本語に翻訳するAPIを作って"

// LLM解析結果
interface ParsedAPISpec {
  purpose: string              // "天気情報取得"
  endpoint: string            // "/tokyo-weather"
  method: "GET" | "POST"      // "GET"
  parameters: Parameter[]     // [{ name: "city", type: "string" }]
  responseSchema: JSONSchema  // 期待レスポンス形式
  externalAPI: string        // "OpenWeatherMap"
  complexity: "simple" | "medium" | "complex"
  suggestedPrice: string     // "$0.05"
}
```

**🤖 AI駆動コード生成:**
```typescript
// 自動生成されるHonoルート
app.get('/tokyo-weather', 
  x402('0xUserWallet', '$0.05'), 
  async (c) => {
    const city = c.req.query('city') ?? 'Tokyo'
    const weather = await fetchWeatherAPI(city)
    return c.json({
      city,
      temperature: weather.main.temp,
      condition: weather.weather[0].description,
      timestamp: new Date().toISOString()
    })
  }
)
```

**⚡ 即座デプロイ & テスト:**
- 生成後30秒以内に利用可能
- テストUI自動生成
- x402決済フロー即座体験

#### 3.4 学習体験フロー (`/learn/*`, `/ai-demo/*`)

**概要**: x402プロトコルの段階的学習とAIエージェント体験

**📚 学習コンテンツ (`/learn/*`)**:

**基礎学習 (`/learn/basics`)**:
```typescript
// インタラクティブ学習モジュール
const learningModules = [
  {
    title: "HTTP 402とは？",
    content: "従来使われなかった402ステータスコード",
    interactive: "402レスポンス体験",
    duration: "5分"
  },
  {
    title: "ブロックチェーン決済の仕組み",
    content: "USDC・ウォレット・署名の基本",
    interactive: "模擬ウォレット体験",
    duration: "10分"
  },
  {
    title: "AIエージェント時代の決済",
    content: "なぜアカウントレス決済が重要？",
    interactive: "従来手法との比較",
    duration: "8分"
  }
]
```

**体験型チュートリアル (`/learn/tutorial`)**:
```typescript
// ステップバイステップガイド
const tutorialSteps = [
  {
    step: 1,
    title: "初めてのAPI作成",
    task: "「こんにちは」を返すAPIを作ろう",
    guidance: "自然言語入力ガイド",
    completion: "API生成成功"
  },
  {
    step: 2, 
    title: "x402設定",
    task: "作成APIにx402決済を追加",
    guidance: "価格設定・ウォレット接続",
    completion: "決済設定完了"
  },
  {
    step: 3,
    title: "実際の決済体験", 
    task: "自分のAPIを呼び出して支払い",
    guidance: "ウォレット操作・取引確認",
    completion: "初回決済成功"
  }
]
```

**🤖 AIエージェント体験 (`/ai-demo/*`)**:

**AI会話デモ (`/ai-demo/chat`)**:
```typescript
// AIエージェントシミュレーター
const aiAgentDemo = {
  scenario: "天気を調べるタスク",
  userInput: "今日の東京の天気を教えて",
  aiProcess: [
    "天気情報が必要だと判断",
    "利用可能なAPIを検索",
    "/tokyo-weather APIを発見",
    "$0.05 USDC自動支払い",
    "APIからデータ取得",
    "ユーザーに回答生成"
  ],
  visualization: "各ステップの詳細表示"
}
```

**決済フロー可視化 (`/ai-demo/payments`)**:
- HTTPリクエスト/レスポンスの表示
- x402ヘッダーの中身解説
- ブロックチェーン取引の追跡
- エラーハンドリングの説明

#### 3.5 技術コンポーネント詳細

**🧠 LLM統合システム (`packages/llm-services`)**:
```typescript
// 自然言語→API仕様変換
interface LLMAPIGenerator {
  parseUserInput(input: string): Promise<APISpecification>
  generateHonoCode(spec: APISpecification): Promise<string>
  estimateComplexity(spec: APISpecification): ComplexityLevel
  suggestPricing(complexity: ComplexityLevel): string
}

// サポートするLLMプロバイダー（コスト削減対応）
const llmProviders = {
  google: "Gemini Pro for code generation (コスト効率)",
  userProvided: "ユーザーAPIキー設定 (OpenAI/Anthropic/Google)",
  local: "Ollama for offline processing"
}
```

**⛓️ x402プロトコル統合 (`packages/x402-integration`)**:
```typescript
// x402-hono統合
import { x402 } from '@coinbase/x402-hono'

const x402Middleware = (walletAddress: string, price: string) => {
  return x402(walletAddress, {
    price,
    currency: 'USDC',
    networks: ['base-sepolia'], // Base Sepolia専用
    onPaymentSuccess: trackUsage,
    onPaymentFailed: logError
  })
}
```

**🔗 ブロックチェーン接続 (`packages/blockchain-connector`)**:
```typescript
// ウォレット接続・決済処理
interface BlockchainConnector {
  connectWallet(provider: WalletProvider): Promise<Wallet>
  verifyPayment(txHash: string): Promise<PaymentStatus>
  trackTransaction(txHash: string): Promise<TransactionDetails>
  supportedNetworks: ['base-sepolia'] // Base Sepolia専用
  supportedTokens: ['USDC'] // USDC専用
}
```

**🚀 動的API配信 (`apps/backend/services`)**:
```typescript
// 実行時API追加システム
interface DynamicAPIDeployer {
  deployAPI(spec: APISpecification): Promise<DeployedAPI>
  registerRoute(endpoint: string, handler: RouteHandler): void
  hotReload(apiId: string, newCode: string): Promise<void>
  removeAPI(apiId: string): Promise<void>
}

// 実行例
const deployedAPI = await deployer.deployAPI({
  endpoint: '/tokyo-weather',
  method: 'GET',
  handler: generatedHandler,
  x402Config: { price: '$0.05', wallet: userWallet }
})
```

**📊 リアルタイム可視化 (`apps/frontend/components`)**:
```typescript
// 決済フロー可視化コンポーネント
const PaymentFlowVisualizer = () => {
  const [currentStep, setCurrentStep] = useState(0)
  
  const steps = [
    { name: "API Request", status: "completed" },
    { name: "402 Response", status: "in-progress" },
    { name: "Payment Sign", status: "pending" },
    { name: "TX Confirm", status: "pending" },
    { name: "Data Return", status: "pending" }
  ]
  
  return <StepFlow steps={steps} />
}
```

### 4. 学習ジャーニー・ユーザー体験設計

#### 4.1 学習パス設計

**🎯 初心者パス（30分完了）**:
```typescript
const beginnerPath = [
  {
    phase: "理解",
    duration: "10分",
    content: [
      "x402とは？ (5分)",
      "従来決済との違い (5分)"
    ],
    outcome: "x402の基本概念理解"
  },
  {
    phase: "体験", 
    duration: "15分",
    content: [
      "初回API作成 (5分)",
      "x402設定 (5分)", 
      "決済体験 (5分)"
    ],
    outcome: "実際の決済フロー体験"
  },
  {
    phase: "応用",
    duration: "5分", 
    content: [
      "AIエージェント体験 (5分)"
    ],
    outcome: "自動決済の理解"
  }
]
```

**🚀 開発者パス（60分完了）**:
```typescript
const developerPath = [
  {
    phase: "深掘り理解",
    duration: "20分",
    content: [
      "HTTPヘッダー詳細 (10分)",
      "ブロックチェーン仕組み (10分)"
    ],
    outcome: "技術的深い理解"
  },
  {
    phase: "実装体験",
    duration: "30分", 
    content: [
      "複雑API作成 (15分)",
      "エラーハンドリング (10分)",
      "カスタマイズ (5分)"
    ],
    outcome: "実装スキル習得"
  },
  {
    phase: "統合活用",
    duration: "10分",
    content: [
      "他プロジェクトでの活用方法 (10分)"
    ],
    outcome: "応用可能性理解"
  }
]
```

#### 4.2 体験フロー詳細

**🌟 初回体験フロー**:
```typescript
// ユーザーの初回アクセス
const firstTimeExperience = {
  welcome: {
    message: "x402プロトコルを30秒で体験しよう！",
    cta: "デモAPIを呼び出してみる"
  },
  
  quickDemo: {
    step1: "ボタンをクリック",
    step2: "402エラーを確認", 
    step3: "「支払って続行」をクリック",
    step4: "結果表示！",
    duration: "30秒"
  },
  
  understanding: {
    explanation: "今起こったこと",
    visualization: "決済フローの図解",
    benefits: "従来方法との比較"
  },
  
  nextAction: {
    options: [
      "自分でAPIを作ってみる",
      "詳しく学習する", 
      "AIデモを見る"
    ]
  }
}
```

**🛠️ API作成体験**:
```typescript
const apiCreationFlow = {
  naturalLanguageInput: {
    prompt: "どんなAPIが欲しいですか？",
    examples: [
      "東京の天気を教えるAPI",
      "画像から猫を判定するAPI",
      "英語を日本語に翻訳するAPI"
    ],
    placeholder: "自由に入力してください..."
  },
  
  aiGeneration: {
    loading: "AIがAPIを生成中...",
    progress: [
      "要求を分析しています",
      "最適な実装を検討中", 
      "コードを生成しています",
      "x402設定を追加中"
    ],
    duration: "30-60秒"
  },
  
  preview: {
    generatedCode: "生成されたコード表示",
    configuration: "価格・設定の確認",
    customization: "簡単なカスタマイズ"
  },
  
  deployment: {
    oneClick: "デプロイボタンクリック",
    confirmation: "API利用可能通知",
    testInterface: "テストUI自動表示"
  }
}
```

#### 4.3 学習効果測定

**📊 理解度チェック**:
```typescript
const comprehensionCheck = {
  conceptualQuestions: [
    "HTTP 402とは何ですか？",
    "x402の主なメリットは？", 
    "AIエージェントにとって重要な理由は？"
  ],
  
  practicalTasks: [
    "簡単なAPIを作成してください",
    "x402設定を変更してください",
    "決済フローを説明してください"
  ],
  
  applicationScenarios: [
    "あなたのプロジェクトでどう活用しますか？",
    "どんなAPIを作りたいですか？"
  ]
}
```

**🎯 エンゲージメント指標**:
```typescript
const engagementMetrics = {
  learningProgress: {
    tutorialCompletion: "チュートリアル完了率",
    timeSpent: "学習時間",
    retryAttempts: "再挑戦回数"
  },
  
  practicalEngagement: {
    apisCreated: "作成API数",
    paymentsExecuted: "実行決済数", 
    aiDemoUsage: "AIデモ利用回数"
  },
  
  knowledgeRetention: {
    quizScores: "理解度テスト結果",
    followUpVisits: "再訪問率",
    communityParticipation: "コミュニティ参加"
  }
}
```

#### 3.5 Workers Platform統合
- **公式アダプター**: @opennextjs/cloudflare (Cloudflare公式サポート)
- **ランタイム**: Cloudflare Workers V8エンジン
- **互換性フラグ**: nodejs_compat
- **統合メリット**:
  - Service Bindingsによる高速Workers間通信
  - Wrangler CLI統一によるシームレスな開発体験
  - エッジでのフルスタック実行（レイテンシー最小化）
  - 共有リソース（KV、R2、D1）への統一アクセス
- **サポート機能**:
  - App Router（推奨）
  - Server Components
  - Server Actions（フォーム処理、UI状態管理用）
  - Middleware（認証・リダイレクト用）
  - 静的生成（SSG）
  - サーバーサイドレンダリング（SSR）
  - 動的ルーティング
- **非使用機能**:
  - API Routes（Honoバックエンドで代替）
- **制限事項**:
  - Node.js固有APIは制限あり（nodejs_compatで一部対応）
  - File Systemアクセス不可
  - Workers環境のメモリ・CPU制限に準拠

### 5. LLM統合・AI連携仕様

#### 5.1 LLMプロバイダー統合

**🤖 マルチLLM対応（コスト最適化）**:
```typescript
// LLMプロバイダー設定
interface LLMProvider {
  google: {
    model: "gemini-pro",
    use: "メインのコード生成・API仕様作成",
    apiKey: process.env.GOOGLE_AI_API_KEY,
    maxTokens: 4000,
    costPerRequest: "$0.001" // 大幅なコスト削減
  },
  userOpenAI: {
    model: "gpt-4o",
    use: "ユーザー自身のAPIキー設定時",
    apiKey: "USER_PROVIDED", // ユーザーが設定
    maxTokens: 4000
  },
  userAnthropic: {
    model: "claude-3-5-sonnet-20241022", 
    use: "ユーザー自身のAPIキー設定時",
    apiKey: "USER_PROVIDED", // ユーザーが設定
    maxTokens: 8000
  },
  local: {
    model: "llama-3.1-8b",
    use: "オフライン処理・プライベート環境",
    endpoint: "http://localhost:11434"
  }
}
```

**📝 自然言語→API仕様変換（コスト最適化パイプライン）**:
```typescript
// 段階的解析プロセス（Googleメイン、ユーザーAPIキー併用）
const nlpPipeline = [
  {
    stage: "意図分類",
    llm: "google", // Gemini Pro使用でコスト削減
    prompt: "ユーザーは何を作りたいのか？",
    output: "IntentClassification"
  },
  {
    stage: "技術仕様作成", 
    llm: "google", // Gemini Pro使用でコスト削減
    prompt: "実装可能なAPI仕様に変換",
    output: "APISpecification"
  },
  {
    stage: "コード生成",
    llm: "userProvided || google", // ユーザーAPIキー優先、なければGemini
    prompt: "Hono + x402のコード生成",
    output: "ExecutableCode"
  },
  {
    stage: "価格最適化",
    llm: "google", // Gemini Pro使用でコスト削減
    prompt: "適正な価格設定提案",
    output: "PricingSuggestion"
  }
]
```

#### 5.2 AI統合サービス連携

**🔧 外部AIサービス統合**:
```typescript
// 生成APIで利用可能なAIサービス
const aiServices = {
  vision: {
    provider: "OpenAI GPT-4 Vision",
    capabilities: ["画像解析", "OCR", "物体検出"],
    costPerRequest: "$0.01",
    integration: "直接API呼び出し"
  },
  
  translation: {
    provider: "Google Translate API",
    capabilities: ["多言語翻訳", "言語検出"],
    costPerRequest: "$0.001", 
    integration: "プロキシ経由"
  },
  
  textGeneration: {
    provider: "OpenAI GPT-4o",
    capabilities: ["要約", "感情分析", "コンテンツ生成"],
    costPerRequest: "$0.005",
    integration: "ストリーミング対応"
  },
  
  speechToText: {
    provider: "OpenAI Whisper",
    capabilities: ["音声認識", "文字起こし"],
    costPerRequest: "$0.006",
    integration: "ファイルアップロード"
  }
}
```

**⚡ リアルタイムAI統合**:
```typescript
// ストリーミングAI応答
const streamingAIIntegration = {
  chatCompletion: {
    endpoint: "/api/ai/chat-stream",
    x402Price: "$0.02",
    features: [
      "リアルタイム文字送出",
      "中断可能な生成",
      "コンテキスト保持"
    ]
  },
  
  codeGeneration: {
    endpoint: "/api/ai/code-stream", 
    x402Price: "$0.05",
    features: [
      "段階的コード生成",
      "エラー修正提案",
      "最適化提案"
    ]
  }
}
```

#### 5.3 AIエージェント体験実装

**🤖 エージェントシミュレーター**:
```typescript
// AIエージェントの決済行動をシミュレート
class AIAgentSimulator {
  async executeTask(userRequest: string) {
    const steps = [
      {
        action: "タスク分析",
        thought: `「${userRequest}」を実行するには...`,
        duration: 1000
      },
      {
        action: "API検索", 
        thought: "必要なAPIを探しています...",
        apiSearch: await this.searchAvailableAPIs(userRequest),
        duration: 2000
      },
      {
        action: "支払い決定",
        thought: "このAPIは$0.05です。予算内なので実行します",
        paymentDecision: true,
        duration: 1000
      },
      {
        action: "x402決済",
        thought: "USDC支払いを実行中...",
        payment: await this.executePayment(),
        duration: 3000
      },
      {
        action: "API実行",
        thought: "データを取得中...", 
        apiCall: await this.callAPI(),
        duration: 2000
      },
      {
        action: "結果整理",
        thought: "ユーザーに回答を生成中...",
        response: await this.generateResponse(),
        duration: 1500
      }
    ]
    
    return this.visualizeProcess(steps)
  }
}
```

#### 5.4 学習コンテンツAI生成

**📚 動的コンテンツ生成**:
```typescript
// ユーザーレベルに応じた説明生成
const adaptiveContentGeneration = {
  generateExplanation: async (concept: string, userLevel: UserLevel) => {
    const prompt = `
    概念: ${concept}
    対象レベル: ${userLevel} 
    
    ${userLevel}レベルの人に${concept}を説明してください。
    - 専門用語の使用: ${userLevel === 'beginner' ? '最小限' : '適度'}
    - 例の複雑さ: ${userLevel === 'beginner' ? 'シンプル' : '実用的'}
    - 詳細度: ${userLevel === 'advanced' ? '高い' : '基本的'}
    `
    
    return await llm.generate(prompt)
  },
  
  generateInteractiveDemo: async (apiType: string) => {
    // APIタイプに応じたインタラクティブデモ生成
    const demoSpec = await llm.generateDemo(apiType)
    return await deployInteractiveDemo(demoSpec)
  }
}
```

### 6. 性能検証・ベンチマーク基準

#### 6.1 学習プラットフォーム特化指標

**📚 学習効果測定:**
- **理解度向上**: 事前・事後テストでの理解度差
- **実践移行率**: 学習後の実装挑戦率
- **継続学習率**: 複数セッション完了率
- **推奨率**: ユーザーの他者推奨意向

**⚡ AI生成速度:**
- **API生成時間**: 自然言語入力から30秒以内
- **LLM応答時間**: 複雑な要求でも60秒以内
- **コード品質**: 生成コードの実行成功率95%以上
- **エラー率**: AI生成の失敗率5%以下

#### 4.2 負荷テスト・ベンチマーク

**負荷テストシナリオ:**
```
シナリオ1: 通常負荷
- 100 concurrent users
- API calls: 500 req/min per user
- Duration: 10分間

シナリオ2: スパイク負荷  
- 1,000 concurrent users (5分間)
- API calls: 1,000 req/min per user
- 目標: 95%のリクエストが成功

シナリオ3: 持続負荷
- 300 concurrent users
- Duration: 30分間
- 目標: レスポンス時間の劣化なし
```

**ベンチマーク測定項目:**
- **エンドツーエンド**: ユーザー操作から結果表示まで
- **Service Bindings**: Frontend ↔ Backend 通信速度
- **Database**: クエリ実行時間、接続プール効率
- **Cache**: KV読み書き、Next.jsキャッシュ効果

#### 4.3 モニタリング・アラート基準

**SLA定義:**
- **可用性**: 99.9%（月間43分以内のダウンタイム）
- **エラー率**: 0.1%以下
- **P95レスポンス時間**: 200ms以内
- **P99レスポンス時間**: 500ms以内

**アラート閾値:**
- **エラー率**: 1%超過で警告、5%超過でクリティカル
- **レスポンス時間**: P95が500ms超過で警告
- **リソース使用率**: CPU 80%、Memory 90%超過
- **DB接続**: プール使用率90%超過

#### 4.4 技術検証目標

**モノレポ効果測定:**
- **ビルド時間**: 全体ビルド5分以内
- **型安全性**: TypeScript strict mode完全準拠
- **開発効率**: ホットリロード3秒以内
- **デプロイ速度**: 本番デプロイ3分以内

**Workers統合効果:**
- **Service Bindings**: 従来HTTP APIより50%高速
- **Edge分散**: 東京・ニューヨーク・ロンドンで均一性能
- **コールドスタート**: 初回リクエスト100ms以内

### 5. 環境・インフラ要求

#### 5.1 開発環境
- **統合開発**: Docker Compose（推奨）
  - PostgreSQL + Redis (KV互換) + 全サービス統合
  - `docker-compose up` で完全な開発環境起動
- **個別開発**（必要に応じて）:
  - Frontend: Next.js dev server (port 3000) - `npm run dev`
  - Backend: Wrangler dev server (port 8787) - `npm run dev`
- **データベース環境**:
  - 開発: Docker PostgreSQL (本番完全互換)
  - テスト: インメモリSQLite (高速テスト用)
- **統合テスト**: 
  - Workers環境プレビュー: `npm run preview`
  - E2Eテスト: Playwright with Docker services
- **開発フロー**:
  - プロジェクト作成: `npm create cloudflare@latest -- my-app --framework=next`
  - 統合開発: `docker-compose up`
  - 個別開発: `npm run dev` (各アプリディレクトリ)
  - 統合プレビュー: `npm run preview` (Workers環境でテスト)
  - デプロイ: `npm run deploy`

#### 5.2 本番環境
- **フロントエンド**: Cloudflare Workers (Next.js via @opennextjs/cloudflare)
- **バックエンド**: Cloudflare Workers (Hono)
- **データベース**: PostgreSQL (Neon/Supabase) via Hyperdrive
- **キャッシュ**: Workers KV (セッション・クエリキャッシュ)
- **ストレージ**: R2 (ファイル)
- **通信**: Service Bindings (Workers間直接通信)

#### 5.3 CI/CD要求
- **ブランチ戦略**:
  - main → production
  - develop → staging
  - feature/* → preview
- **デプロイフロー**:
  - PR作成時: プレビュー環境自動作成・破棄
  - develop: ステージング自動デプロイ
  - main: 本番デプロイ（承認フロー付き）

### 6. 品質管理要求

#### 6.1 テスト要求
- **単体テスト**: Vitest
- **E2Eテスト**: Playwright
- **カバレッジ**: 自動レポート
- **自動テスト**: PR作成時実行

#### 6.2 コード品質
- **Linter/Formatter**: Biome
- **型チェック**: TypeScript strict mode
- **Git hooks**: コミット時品質チェック

#### 6.3 監視・運用
- **APM**: Cloudflare Analytics
- **エラー追跡**: Sentry
- **ログ**: Cloudflare Logpush
- **アラート**: PagerDuty/Slack

### 7. 開発フロー

#### 7.1 開発効率化
- **モノレポ統合管理**: 単一リポジトリで全コンポーネント管理
- **型定義自動共有**: Hono RPC
- **依存関係一元管理**: npm workspaces
- **共通設定統一**: Biome、TypeScript
- **統一開発体験**: 
  - Wrangler CLI によるフロントエンド・バックエンド統一管理
  - `npm run preview` でプロダクション環境同等のローカルテスト
  - Service Bindingsによる型安全なWorkers間通信

#### 7.2 インテリジェントビルド
- **変更影響範囲検出**: Turborepo
- **増分ビルド**: リモートキャッシュ活用
- **不要作業スキップ**: 自動判定
- **並列実行**: 高速化

#### 7.3 安全デプロイ
- **Blue-Greenデプロイ**: 無停止更新
- **ヘルスチェック**: 自動実行
- **異常検知**: 自動ロールバック
- **DBマイグレーション**: 自動バックアップ

### 8. 成功指標

#### 8.1 技術指標
- ページ読み込み時間: 1秒以内
- API応答時間: 50ms以内
- エラー率: 0.1%未満
- 可用性: 99.9%以上

#### 8.2 開発効率指標
- ビルド時間: 3分以内
- デプロイ時間: 5分以内
- 開発サーバー起動: 30秒以内
- テスト実行時間: 2分以内

### 9. API仕様・データモデル設計

#### 9.1 外部向けAPI仕様（`/api/v1/*`）

**認証API:**
```typescript
POST /api/v1/auth/register
POST /api/v1/auth/login
POST /api/v1/auth/refresh
DELETE /api/v1/auth/logout
```

**API Key管理:**
```typescript
GET /api/v1/keys          // APIキー一覧
POST /api/v1/keys         // APIキー作成
DELETE /api/v1/keys/:id   // APIキー削除
```

**使用量取得:**
```typescript
GET /api/v1/usage/stats   // 使用統計
GET /api/v1/usage/billing // 請求情報（デモ）
```

#### 9.2 内部API仕様（`/internal/*`）

**Service Bindings経由のHono RPC:**
```typescript
// Frontend → Backend通信
internal.auth.validateSession(token)
internal.analytics.getDashboardData(userId)
internal.billing.calculateUsage(userId, period)
internal.users.getProfile(userId)
```

#### 9.3 データモデル設計

**Core Entities:**
```typescript
// ユーザー管理
User {
  id: string
  email: string
  name: string
  role: 'admin' | 'developer' | 'billing_manager'
  createdAt: Date
  updatedAt: Date
}

Organization {
  id: string
  name: string
  planType: 'free' | 'pro' | 'enterprise'
  ownerId: string
  createdAt: Date
}

// API管理
ApiKey {
  id: string
  userId: string
  name: string
  keyHash: string
  permissions: string[]
  expiresAt: Date
  isActive: boolean
}

// 使用量追跡（デモ）
ApiUsage {
  id: string
  userId: string
  apiKeyId: string
  endpoint: string
  method: string
  timestamp: Date
  responseTime: number
  statusCode: number
}

// デモ請求
BillingRecord {
  id: string
  userId: string
  period: string // YYYY-MM
  totalCalls: number
  calculatedCost: number // デモ計算
  createdAt: Date
}
```

**Database Schema（Drizzle）:**
```typescript
// packages/db/src/schema/users.ts
export const users = pgTable('users', {
  id: uuid('id').primaryKey().defaultRandom(),
  email: varchar('email', { length: 255 }).notNull().unique(),
  name: varchar('name', { length: 255 }).notNull(),
  role: varchar('role', { length: 50 }).notNull().default('developer'),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow()
})

export const apiKeys = pgTable('api_keys', {
  id: uuid('id').primaryKey().defaultRandom(),
  userId: uuid('user_id').references(() => users.id),
  name: varchar('name', { length: 255 }).notNull(),
  keyHash: varchar('key_hash', { length: 255 }).notNull(),
  permissions: json('permissions').$type<string[]>(),
  expiresAt: timestamp('expires_at'),
  isActive: boolean('is_active').default(true),
  createdAt: timestamp('created_at').defaultNow()
})

export const apiUsage = pgTable('api_usage', {
  id: uuid('id').primaryKey().defaultRandom(),
  userId: uuid('user_id').references(() => users.id),
  apiKeyId: uuid('api_key_id').references(() => apiKeys.id),
  endpoint: varchar('endpoint', { length: 255 }).notNull(),
  method: varchar('method', { length: 10 }).notNull(),
  timestamp: timestamp('timestamp').defaultNow(),
  responseTime: integer('response_time'),
  statusCode: integer('status_code')
})
```

#### 9.4 Zodバリデーションスキーマ

**共有スキーマ（`packages/shared/src/schemas/`）:**
```typescript
// auth.ts
export const loginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8)
})

export const registerSchema = z.object({
  email: z.string().email(),
  name: z.string().min(1),
  password: z.string().min(8)
})

// api-keys.ts
export const createApiKeySchema = z.object({
  name: z.string().min(1).max(255),
  permissions: z.array(z.string()),
  expiresAt: z.date().optional()
})

// usage.ts
export const usageStatsSchema = z.object({
  period: z.enum(['day', 'week', 'month']),
  startDate: z.date().optional(),
  endDate: z.date().optional()
})
```

### 10. 制約事項

#### 10.1 技術制約
- Cloudflare Workers環境の制限に準拠
- PostgreSQL互換性の維持
- ブラウザ対応: モダンブラウザのみ

#### 10.2 運用制約
- メンテナンス時間: 月1回、深夜時間帯
- データバックアップ: 日次実行
- セキュリティ監査: 四半期1回

### 10. モノレポ管理ツール

#### 10.1 Turborepo 統合
- **ビルドシステム**: Turborepo pipeline による高速ビルド
- **キャッシュ戦略**: リモートキャッシュによる増分ビルド最適化
- **タスクオーケストレーション**: 依存関係解決と並列実行
- **開発スクリプト統合**:
  ```json
  {
    "dev": "turbo dev",
    "build": "turbo build", 
    "test": "turbo test",
    "lint": "turbo lint",
    "typecheck": "turbo typecheck",
    "preview": "turbo preview",
    "deploy": "turbo deploy"
  }
  ```

#### 10.2 パッケージ管理戦略
- **Workspace構成**: npm workspaces による依存関係管理
- **型安全な依存**: `workspace:*` による内部パッケージ参照
- **共有パッケージ**:
  - `@repo/db`: Drizzle schema & migrations
  - `@repo/shared`: 共有型定義・Zodスキーマ
  - `@repo/eslint-config`: 統一ESLint設定
  - `@repo/tsconfig`: 共通TypeScript設定

#### 10.3 開発環境統合
- **Docker Compose**: PostgreSQL + Redis による完全な開発環境
- **Wrangler統合**: フロントエンド・バックエンド統一CLI
- **統一開発フロー**:
  ```bash
  npm run setup      # 初回環境構築
  npm run dev        # 統合開発サーバー起動
  npm run preview    # 本番環境同等テスト
  npm run deploy     # 本番デプロイ
  ```

#### 10.4 CI/CD パイプライン
- **品質ゲート**: typecheck → lint → test → build の順次実行
- **変更検知**: Turborepo による影響範囲の自動判定
- **並列実行**: 独立タスクの同時実行による高速化
- **環境別デプロイ**: 
  - PR作成時: プレビュー環境自動作成
  - develop: ステージング自動デプロイ
  - main: 本番デプロイ（承認フロー付き）

### 11. 今後の拡張予定

#### 11.1 機能拡張
- OAuth2.0対応（Google、GitHub等）
- 多要素認証（MFA）
- 監査ログ機能
- 権限管理画面

#### 11.2 技術拡張
- GraphQL API対応
- WebSocket対応
- 国際化（i18n）
- PWA対応