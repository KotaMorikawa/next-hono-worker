# Task ID: 4
# Title: Hono + x402バックエンド実装
# Status: in-progress
# Dependencies: 3
# Priority: high
# Description: Cloudflare Workers上でHono + x402プロトコル統合のAPI基盤構築
# Details:
1. apps/backend/パッケージ作成
2. Hono + @coinbase/x402-hono ミドルウェア統合
3. Base Sepolia + USDC決済設定
4. 認証ミドルウェア（JWT）
5. ユーザー管理API: /internal/auth/* 
6. API生成エンドポイント: /internal/generator/*
7. 動的ルート管理システム
8. Service Bindings設定
9. wrangler.toml設定

# Test Strategy:
x402決済フローテスト、JWT認証テスト、動的ルート登録テスト、Service Bindings通信テスト

# Subtasks:
## 1. バックエンドパッケージセットアップ [done]
### Dependencies: None
### Description: TypeScript、Honoフレームワーク、Cloudflare Workers設定でapps/backendパッケージ構造を作成
### Details:
Hono、@cloudflare/workers-types、wrangler依存関係でpackage.jsonを初期化。Workers環境用のtsconfig.jsonを設定。基本的なHonoアプリ構造でsrc/index.tsエントリーポイントを作成。ローカルテスト用の開発スクリプトを設定。

## 2. x402プロトコル統合 [done]
### Dependencies: 4.1
### Description: @coinbase/x402-honoミドルウェアをBase SepoliaネットワークとUSDC決済設定で統合
### Details:
@coinbase/x402-honoパッケージをインストール。Base Sepolia RPCエンドポイント、USDCコントラクトアドレス、ウォレットプロバイダーでx402ミドルウェアを設定。動的価格設定用の決済設定を作成。決済失敗時のエラーハンドリングを設定。

## 3. JWT認証ミドルウェア [done]
### Dependencies: 4.1
### Description: APIアクセス制御とユーザーセッション管理のためのJWTベース認証ミドルウェアを実装
### Details:
Workers crypto APIを使用してJWT生成・検証ユーティリティを作成。ルート保護のための認証ミドルウェアを実装。リフレッシュトークンメカニズムを設定。CORSとセキュリティヘッダーを設定。トークン期限切れと更新を処理。

## 4. ユーザー管理API [done]
### Dependencies: 4.3
### Description: 登録、ログイン、プロフィール管理のための/internal/auth/*内部ユーザー管理APIエンドポイントを構築
### Details:
Zodバリデーション付きユーザー登録用POST /internal/auth/registerを実装。JWTトークン生成付きPOST /internal/auth/loginを作成。ユーザーデータ取得用GET /internal/auth/profileを追加。更新用PUT /internal/auth/profileを実装。パスワードリセット機能を追加。

## 5. API生成エンドポイント [done]
### Dependencies: 4.3
### Description: 自然言語からHonoコード変換のための/internal/generator/*アンダーのAPI生成エンドポイントを作成
### Details:
API仕様提出用POST /internal/generator/createを実装。ユーザーの生成API用GET /internal/generator/listを追加。特定API詳細用GET /internal/generator/:idを作成。API削除用DELETE /internal/generator/:idを実装。API仕様のバリデーションを追加。

## 6. 動的ルート管理 [pending]
### Dependencies: 4.2, 4.5
### Description: ユーザー生成APIのランタイム読み込みと実行を伴う動的ルート登録システムを構築
### Details:
永続化用Workers KVを使用したルートレジストリを作成。KVから読み込む動的ルートローダーを実装。ルートコンパイルとバリデーションを追加。サンドボックス実行環境を設定。ルートバージョニングとロールバック機能を実装。

## 7. Service Bindings設定 [pending]
### Dependencies: 4.1
### Description: フロントエンドとバックエンドworkers間の型安全通信のためのService Bindingsを設定
### Details:
wrangler.tomlでservice bindingsを設定。フロントエンド用Hono RPCインターフェースを作成。型付きAPIコントラクトを定義。リクエスト・レスポンスのシリアライゼーションを実装。開発環境バインディングを設定。

## 8. Wrangler設定 [pending]
### Dependencies: 4.7
### Description: 環境変数、バインディング、デプロイ設定でwrangler.toml設定を完成
### Details:
環境固有設定（開発、ステージング、本番）を設定。ルートストレージとキャッシュ用KVネームスペースを設定。D1データベースバインディングを設定。APIキーとシークレット用環境変数を追加。カスタムドメインとルートを設定。

## 9. エラーハンドリング・モニタリング [pending]
### Dependencies: 4.4, 4.5, 4.6
### Description: バックエンドのための包括的エラーハンドリング、ログシステム、モニタリング統合を実装
### Details:
中央集中エラーハンドラーミドルウェアを作成。リクエストトレーシング付き構造化ログを実装。パフォーマンスモニタリングフックを追加。ユーザー・API単位のレート制限を設定。Cloudflare Analytics APIと統合。ヘルスチェックエンドポイントを作成。

